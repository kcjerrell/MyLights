240711  I need to implement scene mode somehow
		And then some kind of color transition thing that uses scene mode, for the lightmods to use

210427	I need to figure out a way to enable immediate property sets, that bypass the grouping delay
		and gate. In a way that will work for different bridges/providers. Which means modifying the 
		interfaces, I guess. And the Light or LightViewModel...

210426	I need to iron out some issues with LightViewModel and property notifications. There's a couple
		issues here:
			- Color has 3 components that are handled separately in the UI (I don't think there's any 
			  kind of 1-dimensional color control, except like a palette) but the Light class, and the 
			  device itself, treat it as a single discrete value. It's really not that complicated of a
			  thing, I'm just having trouble getting the 5 values all in sync and notifying properly
			  - Light.Color
			  - LightViewModel.Color
			  - LightViewModel.H
			  - LightViewModel.S
			  - LightViewModel.V
			- Complicating this issue somewhat is the delay issue, which is the other big problem.
			  Sliders need to stay responsive and still in sync.
			- I've never thought about doing it this way before... the only update *from* the device
			  that is necesary is the first one. It's not like they are going to change on their own
			  (unless I change them with another device/app). I could try refocusing everything on
			  *outgoing* values and for the *most* part, disregarding incoming notifications and simply
			  maintaining the local state. Perhaps periodically resyncing, but even with that, a
			  discrepancy would be handled by sending another message to change to the app's value.
			  I think I'll try that strategy.
			- Also, I'm thinking of disabling Fody for the LightViewModel. For most things, Fody is
			  great, but I think I want more control over things.


210424	Okay so I got a lot of that that stuff done. I still need to examine the logs (on both ends)
		and make sure there's not extra messages being sent or any messages discarded.

		Also, I need to figure out how to do the brightness/colortemp sliders right.
			- discuss more about this issue here

		I'm not sure the color model here really make sense, at least when it comes to representing
		color in the GUI. The issue of course is with V (value). Actually the issue comes from the
		fact that they are light sources, and they aren't surrounded by other light sources (like
		pixels, where a "dark" pixel has contrast against a "light" pixel.) I think visually, in the
		GUI, I should be representing the colors with full V, while provided access to V as if it was
		brightness. hold on let me put the closet back in... and I'm going to maintain a TODO list at
		the top of this file

210422	I really need to iron out all the async calls in this, and as part of that, make sure that 
		anything that touches the UI is safely dispatched. I think that's been the reason for a lot
		of issues I've had the whole time and I didn't even realize it until recently.

		For instance I never knew until today that exceptions in async code aren't caught until they 
		are awaited. I've been doing a lot of this in a "fire-and-forget" style.

		One tool I can use here is local functions. Also, I'm sure there's a more idiomatic way of 
		dispatching to the ui thread. Although I kind of like my pseudo-recursive pattern.

		public void UpdateSomething(double value)  {
			if (Thread.Current != UiDispatcher.Thread) {
				UiDispatcher.Invoke(() => UpdateSomething(value));
			}
			else {
				...ui touching code...
			}
		}

		I feel like there might be some issues there though too.

		Also, I need to figure out why the "Brightness" and "ColorTemp" sliders are sticky. I'm not sure
		why that would be. The Value slider isn't. It has to be something with how brightness and colortemp
		are direct, but value is just a component of color.

		That'll be a part of the async review. As well as making sure messages are properly gated. Sliders
		can end up making a shit ton of calls. I don't like the Binding delay property, because it doesn't 
		trigger until you stop.

		Also, I'm pretty sure that combining Hue and Saturation into one control is resulting in two messages
		being sent, as each one is updated. I need to combine that somehow, and actually, it's part of the
		gating thing I just mentioned. No, they aren't being sent as two. Well they are, but the way it works
		right now must be like...
		
		- you move the 'cursor' to a new place on the spectrum
		- one of the axis values updates first, let's say the X axis
		- the binding updates the Hue property on the VM
		- The VM calls down to the Light, which calls Color.Set.
		- Assuming Color.Set isn't already running, it immediately send a message to update the color,
		  but only with the new Hue.
		- the other axis value updates on the control, the Y axis
		- the binding updates the Saturation property on the VM
		- the vm calls down to the Light, which calls Color.Set
		- Color.set is already sending a message, or it's "cooling down"
		- The new color value (with the updated Saturation)* is stored
		- Color.set finish it's delay and sends a msg with the stored color

		I just noticed a new problem with this process. Let's say our color is 1-1-1 (full on red)
		We click the spectrum and jump it to a new position, .3-.5-1 (I think that's like a weak yellow green)
		Because they are updated as two discrete values from the control to the vm, the first color update would
		.3-1-1 (changing the hue on the currently stored color value from the Light object);

		But then the second one goes though, and it might change it to 1-.5-1 instead of .3-.5-1 because the current
		color value hasn't updated yet.

		Actually it's not happening that way because currently the VM does not actually use the color value from the model.
		It reports it, but it doesn't use it at all for updating single components of the color. That's a problem.

		If they lightbulbs only had R G B as seperately accessible values this would all be easy. but nope, color is 3 combined
		values (almost always) expressed as one. 

		really I should just suck it up and figure/implement the protocol in c#. Or try and update/fix TuyaKit/TuyaCore. That might
		actually be a good idea for hirability. I think both of those are pretty much abandoned.

		Also I need to (maybe do this first) prune the crap I don't need or abandoned, and reorganize the whole thing.


Authorization Key
Access ID/Client ID: vc8ksfa5achz2qp2arkx
Access Secret/Client Secret: 9a8248a546844b6e80b7bc2a952e05fe

iOS Bundle ID: com.chimerax.mylights
Android Package Name: com.chimerax.mylights
URL Scheme: chimeraxmylights

Device VirtualIDs
ebf1e92bd63d8c059dbcvn
ebf8d36fec611039bbggej

 id                        key                 ip              name
{ id: 'eba040c47ea782ca16eiad', key: 'e5cbe0a10dad9c93', ip: '192.168.0.21', name: 'Face' }
{ id: 'eb2773e38adbb12683puvk', key: 'aa736ffedbe56ec8', ip: '192.168.0.23', name: 'UpRight' }
{ id: 'ebf1e92bd63d8c059dbcvn', key: '1022bf390de07246', ip: '192.168.0.18', name: 'DownRight' }
{ id: 'eb32d7cd40417c0f6addl9', key: '2bd713fa0d0d07e2', ip: '192.168.0.22', name: 'DownLeft' }
{ id: 'ebf8d36fec611039bbggej', key: '50dad0673f4febbc', ip: '192.168.0.17', name: 'UpLeft' }
{ id: 'ebfc8703b8fcfab217ot0v', key: '1a13a246e713fe58', ip: '192.168.0.24', name: 'Up' }


DPS indexes:
	Type A:
		1: Power
		2: Mode
		3: Brightness
		4: Colortemp
		5: Color

	Type B:
		20: Power
		21: Mode
		22: Brightness
		23: Colortemp
		24: Color
		25: Scene?
		26: Timer?
		27: Music?

DPS_INDEX_ON = {'A': '1', 'B': '20'}         
	DPS_INDEX_MODE = {'A': '2', 'B': '21'}
	DPS_INDEX_BRIGHTNESS = {'A': '3', 'B': '22'}
	DPS_INDEX_COLOURTEMP = {'A': '4', 'B': '23'}
	DPS_INDEX_COLOUR = {'A': '5', 'B': '24'}
	DPS_INDEX_SCENE = {'A': '2', 'B': '25'}
	DPS_INDEX_TIMER = {'A': None, 'B': '26'}
	DPS_INDEX_MUSIC = {'A': None, 'B': '27'}


So, it seems that these bulbs automatically fade to new settings if the change is...
H: >= 0.4		S: >= 0.3		V: >= 0.2

Which kind of sucks. if it faded for smaller values, then that would be perfect. I noticed on 
some docs online, through the cloud api, you can set a fade duration. So I'm pretty sure it's
possible to do it locally, I just don't know how. :(