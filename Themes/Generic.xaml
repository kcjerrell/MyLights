<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MyLights"
    xmlns:ctrl="clr-namespace:MyLights.Controls"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
  xmlns:util="clr-namespace:MyLights.Util" 
  xmlns:views="clr-namespace:MyLights.Views"
  xmlns:vm="clr-namespace:MyLights.ViewModels">

  <SolidColorBrush x:Key="XYThumbBackgroundColor" Color="Black"/>

  <Style TargetType="{x:Type ctrl:XYSelector}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:XYSelector}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Margin="{TemplateBinding Padding}"
                  ClipToBounds="True">
            <Grid>

              <!--
              <Thumb Name="thumb" Panel.ZIndex="100" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Thumb.Template>
                  <ControlTemplate>
                    <Ellipse Width="{Binding ThumbSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:XYSelector}}}"
                                             Height="{Binding ThumbSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:XYSelector}}}" 
                                             Fill="{Binding ThumbFill, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:XYSelector}}}" 
                                             Stroke="{Binding ThumbStroke, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:XYSelector}}}" 
                                             StrokeThickness="{Binding ThumbStrokeSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ctrl:XYSelector}}}"/>
                  </ControlTemplate>
                </Thumb.Template>
              </Thumb>
              -->

              <Grid Name="thumb" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Border Width="3" Height="8" Background="{StaticResource XYThumbBackgroundColor}" HorizontalAlignment="Center" 
                        VerticalAlignment="Stretch" Margin="0,0,0,15"/>
                <Border Width="3" Height="8" Background="{StaticResource XYThumbBackgroundColor}" HorizontalAlignment="Center" 
                        VerticalAlignment="Stretch" Margin="0,15,0,0"/>
                <Border Width="8" Height="3" Background="{StaticResource XYThumbBackgroundColor}" HorizontalAlignment="Stretch" 
                        VerticalAlignment="Center" Margin="0,0,15,0"/>
                <Border Width="8" Height="3" Background="{StaticResource XYThumbBackgroundColor}" HorizontalAlignment="Stretch" 
                        VerticalAlignment="Center" Margin="15,0,0,0"/>
              </Grid>

              <TextBlock HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="Black" FontSize="11"
                                   Text="{TemplateBinding DisplayValue}"
                                   Visibility="{TemplateBinding TextVisibility}"/>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="Transparent"/>

  </Style>

  <Style TargetType="{x:Type ctrl:ColorSlider}">
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Template" Value="{DynamicResource VerticalColorSlider}"/>
      </Trigger>
    </Style.Triggers>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:ColorSlider}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="24">
            <Grid>
              <ctrl:ColorSpectrum1D x:Name="HorizontalSpectrumBorder" Panel.ZIndex="0" Margin="0,3" Mode="{TemplateBinding Mode}"
                                    Hue="{TemplateBinding Hue}"/>
              <ctrl:ColorSpectrum1D x:Name="HorizontalSpectrum" Panel.ZIndex="1" Hue="{TemplateBinding Hue}" 
                                    Saturation="{TemplateBinding Saturation}" Value="{TemplateBinding Value}" 
                                    Mode="{TemplateBinding Mode}" Margin="0,6"/>
              <Border x:Name="HorizontalThumb" Panel.ZIndex="2" Height="24" Width="5" BorderBrush="White" BorderThickness="1" Background="Black"/>

            </Grid>
          </Border>
        </ControlTemplate>

      </Setter.Value>
    </Setter>
  </Style>


  <ControlTemplate x:Key="VerticalColorSlider" TargetType="{x:Type ctrl:ColorSlider}">
    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <Grid>
        <ctrl:ColorSpectrum1D Panel.ZIndex="0" Orientation="Vertical"/>
        <Thumb Panel.ZIndex="1" Name="VerticalThumb">
          <Thumb.Template>
            <ControlTemplate>
              <Border Height="5" Width="20" BorderBrush="White" BorderThickness="1" Background="Black"/>
            </ControlTemplate>
          </Thumb.Template>
        </Thumb>
      </Grid>
    </Border>
  </ControlTemplate>


  <Style TargetType="{x:Type ctrl:EditLabel}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:EditLabel}">
          <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Background="Transparent">

              <Border BorderThickness="1" BorderBrush="Transparent" Padding="1,0">
                <TextBlock x:Name="label" Text="{TemplateBinding Text}" FontFamily="{TemplateBinding FontFamily}" 
                           FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" 
                           FontWeight="{TemplateBinding FontWeight}" FontStretch="{TemplateBinding FontStretch}"
                           Panel.ZIndex="10" Foreground="{TemplateBinding Foreground}" Padding="2" HorizontalAlignment="Stretch"
                           VerticalAlignment="Stretch"/>
              </Border>

              <TextBox x:Name="input" Text="{TemplateBinding Text}" FontFamily="{TemplateBinding FontFamily}" Padding="2"
                       FontSize="{TemplateBinding FontSize}" FontStyle="{TemplateBinding FontStyle}" 
                       FontWeight="{TemplateBinding FontWeight}" FontStretch="{TemplateBinding FontStretch}" Panel.ZIndex="5" 
                       Foreground="{TemplateBinding Foreground}" Visibility="Collapsed" AcceptsTab="False" AcceptsReturn="False" 
                       HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsUndoEnabled="True" MaxLines="1" MinLines="1"/>
            </Grid>

          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>

  <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>

  <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>

  <Style x:Key="EditLabelInputStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    <Setter Property="AllowDrop" Value="true"/>
    <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">

          <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" 
                  BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">

            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>

          </Border>

          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" TargetName="border" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
              <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
          <Condition Property="IsSelectionActive" Value="false"/>
        </MultiTrigger.Conditions>
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
      </MultiTrigger>
    </Style.Triggers>
  </Style>


  <Style TargetType="{x:Type ctrl:Knob}">
    <Style.Resources>
      <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    </Style.Resources>

    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ctrl:Knob}">
          <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

            <Grid>

              <!--<Ellipse Panel.ZIndex="10" Width="80" Height="80" Fill="#777777" Stroke="#222222" StrokeThickness="4"/>

              <ctrl:CircleSegment x:Name="Outline" Panel.ZIndex="0" Width="95" Height="95" Stroke="Red" StrokeThickness="4" StartAngle="105"  ArcLength="330" ShowInnerStroke="False"/>
              
              <ctrl:CircleSegment x:Name="Inline" Panel.ZIndex="20" Width="65" Height="65" Stroke="#222222" StrokeThickness="2" StartAngle="105"  ArcLength="330" ShowInnerStroke="False"/>

              <Rectangle x:Name="Notch" Panel.ZIndex="20" Width="4" Height="15" Fill="#222222" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,10">
                <Rectangle.RenderTransform>
                  <RotateTransform x:Name="NotchTransform" Angle="345" CenterX="1" CenterY="-25"/>
                </Rectangle.RenderTransform>
              </Rectangle>-->

              <!--<Ellipse Panel.ZIndex="10" Fill="#777777" Stroke="#222222" StrokeThickness="3" Margin="6"/>

              <ctrl:CircleSegment x:Name="Outline" Panel.ZIndex="0" Margin="1" StrokeThickness="3" StartAngle="105"  ArcLength="0" ShowInnerStroke="False" Visibility="{Binding ShowOutline, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>

              <ctrl:CircleSegment x:Name="Inline" Panel.ZIndex="20" Margin="11" Stroke="#222222" StrokeThickness="1" StartAngle="105"  ArcLength="330" ShowInnerStroke="False"/>

              <Canvas Panel.ZIndex="20">
                <Rectangle x:Name="Notch" 
                           Width="2" Height="10"                           
                           Fill="#222222" 
                           HorizontalAlignment="Center" VerticalAlignment="Bottom"/>
                <Canvas.RenderTransform>
                    <RotateTransform x:Name="NotchTransform"/>                  
                </Canvas.RenderTransform>
              </Canvas>-->

              <Ellipse Panel.ZIndex="0" Margin="0" Fill="#22222222"/>
              <ctrl:CircleSegment x:Name="Outline" Panel.ZIndex="30" Margin="0" Stroke="#222222" StrokeThickness="2" StartAngle="130" ShowInnerStroke="False" Visibility="{Binding ShowOutline, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
              <ctrl:CircleSegment x:Name="Inline" Panel.ZIndex="20" Margin="0" Stroke="#777777" StrokeThickness="1" StartAngle="130"  ArcLength="280" ShowInnerStroke="False"/>
              
              <Canvas Panel.ZIndex="20">
                <Rectangle x:Name="Notch" 
                           Width="2" Height="8"                           
                           Fill="#222222"/>
                <Canvas.RenderTransform>
                  <RotateTransform x:Name="NotchTransform"/>
                </Canvas.RenderTransform>
              </Canvas>
              
            </Grid>

          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>
